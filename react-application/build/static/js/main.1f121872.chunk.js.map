{"version":3,"sources":["Components/Layout/index.js","serviceWorker.js","index.js"],"names":["Layout","state","filterType","dates","handValues","handleChange","e","_this","setState","target","value","getInventory","axios","get","concat","then","res","data","forEach","push","date","weekly","parseFloat","on_hand_value","renderChart","this","_this$state","C3","generate","bindto","size","height","x","columns","Object","toConsumableArray","type","axis","categories","tick","rotate","multiline","classes","props","react_default","a","createElement","className","root","AppBar","position","Toolbar","Typography","variant","title","Select","onChange","inputProps","name","id","icon","select","MenuItem","React","Component","withStyles","flexGrow","menuButton","marginRight","width","color","&:before","borderColor","&:after","fill","Boolean","window","location","hostname","match","ReactDOM","render","Components_Layout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAsCMA,6MACFC,MAAQ,CACJC,WAAY,MACZC,MAAO,GACPC,WAAY,MAEhBC,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVN,WAAYI,EAAEG,OAAOC,OACtB,WACCH,EAAKI,oBAmCbA,aAAe,WAAM,IACTT,EAAeK,EAAKN,MAApBC,WACRU,IAAMC,IAAN,uCAAAC,OAAiDZ,IAAca,KAAK,SAACC,GACjE,IAAIb,EAAQ,GACRC,EAAa,GACjBY,EAAIC,KAAKC,QAAQ,SAACR,GACK,QAAfR,EACAC,EAAMgB,KAAKT,EAAMU,MAEjBjB,EAAMgB,KAAK,UAAYT,EAAMW,QAEjCjB,EAAWe,KAAKG,WAAWZ,EAAMa,kBAErChB,EAAKC,SAAS,CACVL,QACAC,cACD,WACCG,EAAKiB,sGAhDbC,KAAKd,qDAEK,IAAAe,EACoBD,KAAKxB,MAA3BE,EADEuB,EACFvB,MAAOC,EADLsB,EACKtB,WACfuB,IAAGC,SAAS,CACRC,OAAQ,UACRC,KAAM,CACFC,OAAQ,KAEZd,KAAM,CACFe,EAAG,IACHC,QAAS,EACJ,KADInB,OAAAoB,OAAAC,EAAA,EAAAD,CACI/B,IADJ,CAEJ,kBAFIW,OAAAoB,OAAAC,EAAA,EAAAD,CAEiB9B,KAE1BgC,KAAM,OAEVC,KAAM,CACFL,EAAG,CACCI,KAAM,WACNE,WAAYnC,EACZoC,KAAM,CACFC,OAAQ,GACRC,WAAW,GAEfV,OAAQ,wCA4Bf,IACGW,EAAYjB,KAAKkB,MAAjBD,QACAxC,EAAeuB,KAAKxB,MAApBC,WACR,OACI0C,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQM,MACpBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,SAAS,UACbN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWL,EAAQY,OAA5C,mBAGAV,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACI7C,MAAOR,EACPsD,SAAU/B,KAAKpB,aACfoD,WAAY,CACRC,KAAM,cACNC,GAAI,cACJjB,QAAS,CACLkB,KAAMlB,EAAQkB,OAGtBb,UAAWL,EAAQmB,QAEnBjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUpD,MAAM,OAAhB,OACAkC,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUpD,MAAM,QAAhB,WAIZkC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKa,GAAG,mBAlGHI,IAAMC,WAwGZC,cAlIA,CACXjB,KAAM,CACFkB,SAAU,GAEdC,WAAY,CACRC,YAAa,GAEjBd,MAAO,CACHY,SAAU,GAEdL,OAAQ,CACJQ,MAAO,IACPC,MAAO,UACPC,WAAY,CACRC,YAAa,WAEjBC,UAAW,CACPD,YAAa,YAGrBZ,KAAM,CACFc,KAAM,YA6GCT,CAAmBjE,GClId2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,KAAK,SAAAyE,GACjCA,EAAaC","file":"static/js/main.1f121872.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport C3 from 'c3'\nimport 'c3/c3.css'\n\nimport { withStyles } from '@material-ui/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: 8,\n    },\n    title: {\n        flexGrow: 1,\n    },\n    select: {\n        width: 130,\n        color: '#ffffff',\n        '&:before': {\n            borderColor: '#ffffff',\n        },\n        '&:after': {\n            borderColor: '#ffffff',\n        }\n    },\n    icon: {\n        fill: '#ffffff',\n    },\n};\n\n\nclass Layout extends React.Component {\n    state = {\n        filterType: \"day\",\n        dates: [],\n        handValues: []\n    }\n    handleChange = (e) => {\n        this.setState({\n            filterType: e.target.value\n        }, () => {\n            this.getInventory()\n        })\n    }\n    componentDidMount() {\n        this.getInventory()\n    }\n    renderChart() {\n        const { dates, handValues } = this.state\n        C3.generate({\n            bindto: \"#chart1\",\n            size: {\n                height: 550,\n            },\n            data: {\n                x: 'x',\n                columns: [\n                    ['x', ...dates],\n                    ['On Hand values', ...handValues]\n                ],\n                type: 'bar',\n            },\n            axis: {\n                x: {\n                    type: 'category',\n                    categories: dates,\n                    tick: {\n                        rotate: 75,\n                        multiline: false\n                    },\n                    height: 80\n                }\n            }\n        });\n    }\n\n    getInventory = () => {\n        const { filterType } = this.state\n        axios.get(`http://localhost:9090/api/inventory/${filterType}`).then((res) => {\n            let dates = []\n            let handValues = []\n            res.data.forEach((value) => {\n                if (filterType === 'day') {\n                    dates.push(value.date)\n                } else {\n                    dates.push(\"week - \" + value.weekly)\n                }\n                handValues.push(parseFloat(value.on_hand_value))\n            })\n            this.setState({\n                dates,\n                handValues\n            }, () => {\n                this.renderChart()\n            })\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { filterType } = this.state\n        return (\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Daily Inventory\n                        </Typography>\n                        <span>\n                        Filter By : &nbsp; \n                        </span>\n                        <Select\n                            value={filterType}\n                            onChange={this.handleChange}\n                            inputProps={{\n                                name: 'filter-type',\n                                id: 'filter-type',\n                                classes: {\n                                    icon: classes.icon,\n                                },\n                            }}\n                            className={classes.select}\n                        >\n                            <MenuItem value=\"day\">Day</MenuItem>\n                            <MenuItem value=\"week\">Week</MenuItem>\n                        </Select>\n                    </Toolbar>\n                </AppBar>\n                <br />\n                <div id=\"chart1\"></div>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(Layout)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './Components/Layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Layout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}